
El proyecto se ha realizado con el fin de:
Crear una API que permita:

 
Aceptar como parámetros de entrada: fecha de aplicación, identificador de producto, identificador de cadena.
Devolver como datos de salida: identificador de producto, identificador de cadena, tarifa a aplicar, fechas de aplicación y precio final a aplicar.
 
Se debe utilizar una base de datos en memoria (tipo h2) e inicializar con los datos del ejemplo, (se pueden cambiar el nombre de los campos y añadir otros nuevos si se quiere, elegir el tipo de dato que se considere adecuado para los mismos).
              
Desarrollar unos test al endpoint rest que  validen las siguientes peticiones al servicio con los datos del ejemplo:
                                                                                       
-          Test 1: petición a las 10:00 del día 14 del producto 35455   para la brand 1 (ZARA)
-          Test 2: petición a las 16:00 del día 14 del producto 35455   para la brand 1 (ZARA)
-          Test 3: petición a las 21:00 del día 14 del producto 35455   para la brand 1 (ZARA)
-          Test 4: petición a las 10:00 del día 15 del producto 35455   para la brand 1 (ZARA)
-          Test 5: petición a las 21:00 del día 16 del producto 35455   para la brand 1 (ZARA)


Para la cual se uso:
 

📐 Patrones de Diseño

Modelo-Vista-Controlador (MVC): PriceController actúa como un controlador en este patrón, segregando la lógica de la vista y del modelo.
Repositorio: PriceProductRepositoryImpl proporciona un mecanismo para separar la lógica que recupera los datos y los asigna al objeto de entidad.
Inyección de Dependencia (Dependency Injection): Gracias al uso de @Autowired, hemos podido seguir el Principio de Inversión de Control, 
donde los objetos definen sus dependencias pero no se preocupan de cómo se crean.
Casos de Uso (Use Cases): Las clases GetPricePerProduct e GetPricePerProductImpl implementan este patrón para ejemplificar un conjunto específico de acciones 
que representan una operación realizada por el sistema o en él.


📂 Estructura del Proyecto
Nuestro proyecto está organizado en cinco carpetas principales, basadas en el enfoque de desarrollo de API en Spring Boot:
API
auth: Configuraciones de seguridad web (SpringSecurity).
controller: Controladores de API para el manejo de precios.
dto: Aquí se almacenan los datos después de que el controlador los mapea.
exceptions: Las excepciones relativas a la configuración de la API.
mapping: Realiza el mapeo de los datos entre la entidad PriceProduct y el DTO PriceDto.
BOOT: Contiene todo lo necesario para iniciar la aplicación con Spring, incluyendo la carga de datos de prueba y mapeo de los repositorios.
DOMAIN: Incluye las entidades y los casos de uso que se utilizan para las pruebas de la API REST.
EXCEPTIONS: Maneja todas las excepciones del proyecto, a excepción de las que son procesadas en el módulo API.
PERSISTENCE - REPOSITORIES: Aquí se encuentra el repositorio CustomPriceProductRepository, el cual interactúa con la BBDD para obtener detalle de la tabla Prices. 
También gestiona instancias de EntityManager para crear y eliminar instancias persistentes en la base de datos.

La creacion de este servicio se encuentra expuesta en el siguiente link:

 http://localhost:9002/swagger-ui/index.html#/price-controller/getProductPrice

🏁 Empezando

Estas instrucciones te guiarán sobre cómo configurar y ejecutar BCNCInditex en tu máquina local.
Asegúrate de tener instalado Java y Maven en tu computadora.
Clona este repositorio en tu máquina local:

Para ejecutar la app basta con enviar el comando desde el repositorio git clonado (carpeta padre)
-- mvn spring-boot:run

🚀 Ejecutando las pruebas


Para realizar pruebas en el sistema:

-- mvn clean test

También se incluyen pruebas de integración para evaluar cada caso en detalle.
 
📚 API Documentation
Para una visión más detallada de cómo funciona el sistema y qué APIs están disponibles, consulta nuestra documentación de API.
 
📖 Contribuyendo
Si detectas algún problema o si tienes alguna pregunta, por favor, abra un problema en Issues.
  
Espero que encuentres este desarrollo bien aplicado, sin embargo estoy abierto a comentarios.
